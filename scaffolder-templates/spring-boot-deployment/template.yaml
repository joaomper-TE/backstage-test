apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: spring-boot-deployment
  title: Deployment for Spring Boot Microservice
  description: Create a Deployment for a Spring Boot Microservice.
  annotations:
    backstage.io/techdocs-ref: dir:.
  tags:
    - recommended
    - deployment
    - spring-boot
spec:
  owner: engg-effectiveness@thousandeyes.com
  type: service
  parameters:
    - title: Spring Boot Deployment Best Practices
      description: |
        This template assumes that the deployment repo being created corresponds to a single
        application. Note that your supplied "image name" must match must match the image name
        published by your application's source code repo.
      required:
        - app_project_name
        - application_name
        - aws_auto_scaling_group
        - deployment_namespace
        - image_name
        - use_automated_canary
        - monitoring_id
        - owner
        - slack_notification_channel
      properties:
        application_name:
          title: Application Name
          type: string
          pattern: '^[a-zA-Z0-9\-\_]+$'
          ui:description: |
            Name of the application being deployed. eg (notification-service).
            Please use lower case alphanumeric characters and dashes.
          ui:field: EntityNamePicker
        app_project_name:
          title: Application Project Name
          type: string
          ui:description: Name of the argo-deployment AppProject this app should be associated with (AppProject.metadata.name)
          enum:
            - agent-platform
            - ai
            - bbot
            - bgp
            - cloud-agents
            - cloud-and-enterprise-agents
            - cluster-services
            - cp
            - data-vis-platform
            - eb
            - gitops
            - infosec
            - integrations
            - internet-insights
            - observability
            - production-systems
            - revenue-platform
            - rum
            - ui-services
            - webapps
        image_name:
          title: Image Name
          type: string
          pattern: '^[a-zA-Z]+[a-zA-Z0-9\-_\/\.]+[a-zA-Z0-9]+$'
          ui:description: |
            Name of the image being deployed with this application. eg (revenue/notification-service).
            It is critical that this image name match that which is generated by the corresponding application's
            source code repository.
        deployment_namespace:
          title: Deployment Namespace
          type: string
          ui:description: Kubernetes Namespace in which this application should be deployed
          enum:
            - accounting
            - agent
            - alerts
            - analytics
            - bbot
            - bgp
            - cloudagents
            - common
            - cp
            - csc
            - dash
            - dm
            - eb
            - exp
            - gitops
            - infosec
            - int
            - integrations
            - ops
            - rum
            - webapps
        use_automated_canary:
          title: Use Automated Canary deployment strategy?
          type: boolean
          ui:description: Whether or not to use automated canary deployment strategy as part of the rollout.
          ui:widget: radio
        monitoring_id:
          title: Prometheus Product ID
          type: string
          ui:description: ID used by observability tooling to configure metrics collection configuration
          enum:
            - act
            - agent
            - analytics
            - ai
            - bbot
            - bgp
            - ca
            - cicd
            - cp
            - dash
            - dm
            - eb
            - int
            - rum
            - webapps
        aws_auto_scaling_group:
          title: AWS Auto Scaling Group
          type: string
          ui:description: ASG of Nodes to which this applications resources will be assigned
          enum:
            - agent
            - alerts
            - bbot
            - bgp
            - cea
            - cp
            - dash
            - endpoint
            - engineering
            - engineering-effectiveness
            - integrations
            - internet
            - kube
            - ops
            - revenue
            - test
            - webapps
        owner:
          title: Owner
          type: string
          ui:description: Team ownership for this project.
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
        slack_notification_channel:
          title: Slack Notification Channel
          type: string
          pattern: '^[a-zA-Z0-9\-\_]+$'
          ui:description: Slack channel to set ArgoCD notifications to for this application
  steps:
    - id: context
      name: Load Scaffolder Context
      action: thousandeyes:context

    - id: argoDeployment
      name: Fetch argo-deployment
      action: fetch:plain
      input:
        url: https://github.com/${{steps.context.output.github_organization}}/argo-deployment
        targetPath: ./argo-deployment

    - id: deployTemplate
      name: Fetch Deployment Template
      action: fetch:template
      input:
        url: ./skel-deployment
        targetPath: ./tmpl-deployment
        values:
          application_name: ${{ parameters.application_name }}
          aws_auto_scaling_group: ${{ parameters.aws_auto_scaling_group }}
          deployment_namespace: ${{ parameters.deployment_namespace }}
          github_organization: ${{ steps.context.output.github_organization }}
          image_name: ${{ parameters.image_name }}
          use_automated_canary: ${{ parameters.use_automated_canary }}
          monitoring_id: ${{ parameters.monitoring_id }}
          owner: ${{ parameters.owner }}
          project_description: Deployment repo for the ${{ parameters.application_name }} app
          project_id: ${{ parameters.application_name }}-deployment

    - id: appSetTemplate
      name: Fetch ApplicationSet Template
      action: fetch:template
      input:
        url: https://github.com/${{steps.context.output.github_organization}}/backstage-software-templates/tree/main/shared-templates/skel-applicationSet
        targetPath: ./tmpl-appset
        values:
          application_name: ${{ parameters.application_name }}
          app_project_name: ${{parameters.app_project_name}}
          deployment_namespace: ${{ parameters.deployment_namespace }}
          github_organization: ${{ steps.context.output.github_organization }}
          image_name: ${{ parameters.image_name }}
          owner: ${{ parameters.owner }}
          slack_notification_channel: ${{ parameters.slack_notification_channel }}

    - id: publish
      name: Publish Deployment
      action: publish:github
      input:
        allowedHosts: ["github.com"]
        description: This is the ${{ parameters.application_name }} deployment owned by ${{ parameters.owner }}
        repoUrl: github.com?repo=${{ parameters.application_name }}-deployment&owner=${{ steps.context.output.github_organization }}
        sourcePath: ./tmpl-deployment
        access: ${{ steps.context.output.github_organization }}/${{ parameters.owner }}   # org/team-name  e.g. thousandeyes/engineering-effectiveness
        collaborators:
          - team: engineering
            access: pull
          - team: automation
            access: admin
        defaultBranch: main
        topics:
          - engineering
          - jenkinsfile
          - deployment

    - id: registerAppSet
      name: Register AppSet in argo-deployment
      action: thousandeyes:add-applicationset
      input:
        appProjName: ${{ parameters.app_project_name }}
        appsetFilePath: ./tmpl-appset/${{ parameters.application_name }}.applicationset.yaml
        appDeployRepoURI: git@github.com:${{ steps.context.output.github_organization }}/${{ parameters.application_name }}-deployment.git

    - id: openPullRequest
      name: Open argo-deployment Pull Request
      action: publish:github:pull-request
      input:
        repoUrl: github.com?repo=argo-deployment&owner=${{ steps.context.output.github_organization }}
        branchName: add-${{ parameters.application_name }}
        title: "[backstage] add ${{ parameters.application_name }} to staging argo-deployment"
        description: Adding ${{ parameters.application_name }} to staging argo-deployment from portal
        sourcePath: ${{ steps.registerAppSet.output.pullRequestDir }}

    - id: jenkins-webhook
      name: Jenkins Webhook
      action: github:webhook
      input:
        webhookSecret: ${{ steps.context.output.jenkins_shared_secret }}
        webhookUrl: ${{ steps.context.output.jenkins_webhook_url }}
        contentType: json
        repoUrl: github.com?repo=${{ parameters.application_name }}-deployment&owner=${{ steps.context.output.github_organization }}
        events:
          - push
          - pull_request
          - repository

    - id: jarvis-webhook
      name: Jarvis Webhook
      action: github:webhook
      input:
        webhookUrl: ${{ steps.context.output.jarvis_webhook_url }}
        contentType: json
        repoUrl: github.com?repo=${{ parameters.application_name }}-deployment&owner=${{ steps.context.output.github_organization }}
        events:
          - check_run
          - check_suite
          - create
          - commit_comment
          - delete
          - issue_comment
          - issues
          - label
          - pull_request
          - pull_request_review
          - pull_request_review_comment
          - push
          - release
          - repository
          - status

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  output:
    links:
      - title: ${{ parameters.application_name }}-deployment Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in Catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
      - title: "argo-deployment Pull-Request #${{ steps.openPullRequest.output.pullRequestNumber }}"
        url: ${{ steps.openPullRequest.output.remoteUrl }}
