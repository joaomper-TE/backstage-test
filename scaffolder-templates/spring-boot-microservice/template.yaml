apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: spring-boot-microservice
  title: Spring Boot Microservice
  description: Create a Spring Boot based microservice.
  tags:
    - recommended
    - java
    - spring-boot
spec:
  owner: engg-effectiveness@thousandeyes.com
  type: service
  parameters:
    - title: Spring Boot Microservice
      required:
        - project_id
        - owner
        - java_package_name
      properties:
        project_id:
          title: Project Name
          type: string
          pattern: '^[a-zA-Z]+[a-zA-Z0-9\-_]+[a-zA-Z0-9]+$'
          description: |
            This template will create a spring-boot backend application matching the "project_id".
            Note that the corresponding image that gets generated by this codebase will also use "project_id".
          ui:field: EntityNamePicker
        description:
          title: Project Description
          type: string
          description: Brief description of the projects purpose.
        java_package_name:
          title: Java Package Name
          type: string
          pattern: '^[a-z]+[a-z0-9_\.]+[a-z0-9]+$'
          description: Name for the java package. eg (com.thousandeyes.<PKG-NAME>)
        owner:
          title: Owner
          type: string
          description: Team ownership for this project. Must be a valid ThousandEyes GitHub team.
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
  steps:
    - id: context
      name: Load Scaffolder Context
      action: thousandeyes:context

    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        values:
          github_organization: ${{ steps.context.output.github_organization }}
          java_package_name: ${{ parameters.java_package_name }}
          owner: ${{ parameters.owner }}
          project_id: ${{ parameters.project_id }}
          project_description: ${{ parameters.description }}

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ["github.com"]
        description: This is the ${{ parameters.project_id }} owned by ${{ parameters.owner }}
        repoUrl: github.com?repo=${{ parameters.project_id }}&owner=${{ steps.context.output.github_organization }}
        access: ${{ steps.context.output.github_organization }}/${{ parameters.owner }}   # org/team-name  e.g. thousandeyes/engineering-effectiveness
        collaborators:
          - team: engineering
            access: pull
          - team: automation
            access: admin
        defaultBranch: main
        topics:
          - engineering
          - jenkinsfile
          - application

    - id: jenkins-webhook
      name: Jenkins Webhook
      action: github:webhook
      input:
        webhookSecret: ${{ steps.context.output.jenkins_shared_secret }}
        webhookUrl: ${{ steps.context.output.jenkins_webhook_url }}
        contentType: json
        repoUrl: github.com?repo=${{ parameters.project_id }}&owner=${{ steps.context.output.github_organization }}
        events:
          - push
          - pull_request
          - repository

    - id: jarvis-webhook
      name: Jarvis Webhook
      action: github:webhook
      input:
        webhookUrl: ${{ steps.context.output.jarvis_webhook_url }}
        contentType: json
        repoUrl: github.com?repo=${{ parameters.project_id }}&owner=${{ steps.context.output.github_organization }}
        events:
          - check_run
          - check_suite
          - create
          - commit_comment
          - delete
          - issue_comment
          - issues
          - label
          - pull_request
          - pull_request_review
          - pull_request_review_comment
          - push
          - release
          - repository
          - status

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

    - id: edit_readme
      name: Edit ReadMe
      action: thousandeyes:append-file
      input:
        filename: README.md
        contents: |

          Welcome to your first PR!

    - id: create_pr
      name: Your First Pull Request
      action: publish:github:pull-request
      input:
        branchName: your-first-pr
        description: Adding README changes to trigger your initial build from the Portal
        repoUrl: github.com?repo=${{ parameters.project_id }}&owner=${{ steps.context.output.github_organization }}
        title: "[backstage] Updated README to trigger CI/CD workflow"

  output:
    links:
      - title: "Pull Request #${{ steps.create_pr.output.pullRequestNumber }}"
        url: ${{ steps.create_pr.output.remoteUrl }}
      - title: Your First Build
        url: ${{ steps.context.output.jenkins_dashboard_url }}/organizations/jenkins/${{ steps.context.output.github_organization}}%2F${{ parameters.project_id }}/activity
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in Catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
